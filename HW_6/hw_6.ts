'use strict';

//NORMAL level


//Task 1 üíª
/*–°–æ–∑–¥–∞—Ç—å –ª—é–±–æ–π –æ–±—å–µ–∫—Ç —Å –¥–≤—É–º—è –∫–ª—é—á–∞–º–∏ –∏ –ª—é–±—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –Ω–∏—Ö, –∞ –∑–∞—Ç–µ–º —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–∏ –∏–∑ –æ–±—å–µ–∫—Ç–∞. */

//option 1
{
    //–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    let user = {
        name: 'John',
        age: 25
      };

console.log(user); //{ name: 'John', age: 25 }

//–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π —á–µ—Ä–µ–∑ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é
let {name, age, ...newUser} = user;

console.log(newUser); //{}
}


//option 2
{
    interface User {
    name?: string; //–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
    age?: number; //–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
  }
  let obj: User = {
    name: 'John',
    age: 25
  };
 console.log(obj); //{ name: 'John', age: 25 }

    delete obj.name;
    delete obj.age;

console.log(obj); //{}
}




//Task 2 üñ•
/*–°–æ–∑–¥–∞—Ç—å –ª—é–±–æ–π –æ–±—å–µ–∫—Ç —Å –¥–≤—É–º—è –∫–ª—é—á–∞–º–∏ –∏ –ª—é–±—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –Ω–∏—Ö, –∞ –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –≤ –æ–±—å–µ–∫—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∫–ª—é—á 
–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å **true** */
{
 let user = {
        name: 'John',
        age: 25
      };

      console.log("name" in user ) //true
}




//Task 3 üñ•
/*–î–∞–Ω –æ–±—å–µ–∫—Ç:
```javascript
    const student = {
        name: 'John',
        age: 19,
        isHappy: true
    }```
C –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞ **for in** –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ –∫–ª—é—á–∏, –ø–æ—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –æ–±—å–µ–∫—Ç–∞. */
{
    const student = {
        name: 'John',
        age: 19,
        isHappy: true
    }
    for (let studentKey in student ) {
        console.log(studentKey);
    }
    let studentKey: keyof typeof student;
    for (studentKey in student) {
        console.log(student[studentKey]);
}
}




//Task 4 üñ•
/*–î–∞–Ω –æ–±—å–µ–∫—Ç:
```javascript
const colors = {
    'ru pum pu ru rum': {
        red: '–∫—Ä–∞—Å–Ω—ã–π',
        green: '–∑–µ–ª–µ–Ω—ã–π',
        blue: '—Å–∏–Ω–∏–π'
    },
};```
–í—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–ª–æ–≤–æ –∫—Ä–∞—Å–Ω—ã–π –∏ —Å–∏–Ω–∏–π */
{
    const colors = {
        'ru pum pu ru rum': {
            red: '–∫—Ä–∞—Å–Ω—ã–π',
            green: '–∑–µ–ª–µ–Ω—ã–π',
            blue: '—Å–∏–Ω–∏–π'
        },
    };
    console.log(colors['ru pum pu ru rum'].red);
    console.log(colors['ru pum pu ru rum'].blue);
}




//Task 5 üñ•
/* –î–∞–Ω –æ–±—å–µ–∫—Ç:
```javascript
    let salaries = {
        andrey: 500,
        sveta: 413,
        anton: 987,
        andrey: 664,
        alexandra: 199
    } ```
–í—ã—á–∏—Å–ª–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é */
{
    let salaries = {
        andrey: 500,
        sveta: 413,
        anton: 987,
        andrey2: 664,
        alexandra: 199
    };

    let totalSalary = 0;
    let employeeCount = 0;
    
    let employee: keyof typeof salaries
    for (employee in salaries) {
        totalSalary += salaries[employee];
        employeeCount++;
        }    

    let averageSalary = totalSalary / employeeCount;
    
    console.log(averageSalary);
}



//Task 6 üñ•
/*
–°–æ–∑–¥–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä, 2 –º–µ—Ç–æ–¥–∞: –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∏ –ª–æ–≥–∏–Ω. 
–ü–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞—é—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. 
–ó–∞—Ç–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –æ–±—å–µ–∫—Ç. 
–í—Ç–æ—Ä–æ–π –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—ä–µ–∫—Ç –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
–ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–í–∞—Ç—å**.   */
{
    function getUserRegistrationCredentials(login: string, password: string): any {
        return {
            login,
            password
        };
      }
      let user_1 = getUserRegistrationCredentials("John", '123');

    function checkUserCredentials(login: string, password: string, user: { login: string, password: string }): void{
        if (login === user.login && password === user.password) {
        console.log('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–í–∞—Ç—å');
        };
      }
      checkUserCredentials("John", '123', user_1);
}





//ADVANCED level


//Task 1 üë®‚Äçüè´
/* –ú—ã –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–º –º–∞—Ç—á–µ, —Å—á–µ—Ç –∑–∞–±–∏—Ç—ã—Ö –≥–æ–ª–æ–≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 9 –º—è—á–µ–π. 
–ñ–∞–ª—å —á—Ç–æ –Ω–∞–º –ø—Ä–∏—Å—ã–ª–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '2:5', –≤–µ–¥—å –Ω–∞–º –Ω–∞–¥–æ —ç—Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–ª–æ–≤–∞–º–∏. 
–î–∞–≤–∞–π—Ç–µ –Ω–∞–ø–∏—à–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞ –Ω–∞—Å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.  */
{
    function getFormatFootballScore(footballScore: string): void {
        const goals = footballScore.split(':').map(Number);
        const team1 = convertToWord(goals[0]);
        const team2 = convertToWord(goals[1]);
        console.log(`${team1} - ${team2}`);
    }
        function convertToWord(goals: number): string {
        const words = ['–ù–æ–ª—å', '–û–¥–∏–Ω', '–î–≤–∞', '–¢—Ä–∏', '–ß–µ—Ç—ã—Ä–µ', '–ü—è—Ç—å', '–®–µ—Å—Ç—å', '–°–µ–º—å', '–í–æ—Å–µ–º—å', '–î–µ–≤—è—Ç—å'];
        return words[goals];
    }
        getFormatFootballScore('2:5');
}




//Task 2 üñ•
/*
–î–∞–Ω—ã –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –æ–±—å–µ–∫—Ç–∞. –°—Ä–∞–≤–Ω–∏—Ç–µ –∏—Ö —Ç–∞–∫ —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ —Ä–∞–≤–Ω—ã
```javascript
    let student1 = {
        name: 'Polina',
        age: 27,
    }

    let student2 = {
        name: 'Polina',
        age: 27,
    }
```*/
{
    let student1: { name: string; age: number } = {
        name: 'Polina',
        age: 27,
    };
    
    let student2: { name: string; age: number } = {
        name: 'Polina',
        age: 27,
    };
    
    let areEqual = true;
    
    const list_keys1 = Object.keys(student1);
    const List_keys2 = Object.keys(student2);
    
    if (list_keys1.length === List_keys2.length) {
        for (const key of list_keys1) {
            if (student1[key as keyof typeof student1] !== student2[key as keyof typeof student2]) {
                areEqual = false;
                break;
            }
        }
    } else {
        areEqual = false;
    }
    
    if (areEqual) {
        console.log('–û–±—ä–µ–∫—Ç—ã —Ä–∞–≤–Ω—ã');
    } else {
        console.log('–û–±—ä–µ–∫—Ç—ã –Ω–µ —Ä–∞–≤–Ω—ã');
    }
}



//Task 3 üñ•
/*
–î–∞–Ω –æ–±—ä–µ–∫—Ç cat. –°–∫–ª–æ–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ 2 —Å–ø–æ—Å–æ–±–∞–º–∏, –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, 
—á—Ç–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è –≤ 1–æ–º –æ–±—ä–µ–∫—Ç–µ, —ç—Ç–æ –∂–µ –ø–æ–ª–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –≤–æ –≤—Ç–æ—Ä–æ–º –æ–±—ä–µ–∫—Ç–µ. 
–û–±—ä–µ–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø–∏—Å–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é —Ç–∏–ø–∞ –∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
```javascript
const cat = {
      name: '–ï–Ω—á–∏–∫',
      age: 3,
   }
```  */
{
    type I–°at = {
        name: string,
        age: number
    };
    
    const cat: I–°at = {
        name: '–ï–Ω—á–∏–∫',
        age: 3,
     }

     let clone = { ...cat};
     clone.name = "–§–∞–Ω—Ç–∏–∫";

    console.log(cat.name); // –≤—Å–µ –µ—â—ë –ï–Ω—á–∏–∫ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ
    console.log(clone.name); // –§–∞–Ω—Ç–∏–∫

}
'use strict';


/*Task 1 üíª
–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Car. –°–æ–∑–¥–∞–π—Ç–µ –¥–≤–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞ SportCar –∏ LuxuryCar. 
–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ –∏ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è. 
–î–æ—á–µ—Ä–Ω–∏–µ –∫–ª–∞—Å—Å—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –º–µ—Ç–æ–¥—ã –≤—ã–≤–æ–¥—è—â–∏–µ –º–∞–∫—Å–∏–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Ü–µ–Ω—É –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–∏–µ —Ç–∏–ø—ã –∞–≤—Ç–æ. 
–í—ã–≤–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–∏–º: `This is <carName>. It has <engineType> engine and max speed equal to <maxSpeed>. 
Approximetly cost of the car is <carCost>`. 
(–í –∑–∞–¥–∞–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ public –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ)
*/
{
  class Car {
    protected carName: string;
    protected engineType: string;
  
    constructor(carName: string, engineType: string) {
        this.carName = carName;
        this.engineType = engineType;
    }
  
    public getCharacteristicsCar(): string {
        return `This is ${this.carName}. It has ${this.engineType} engine`;
    }
  }
  
  class SportCar extends Car {
    private maxSpeed: string;
    private carCost: string;
  
    constructor(carName: string, engineType: string, maxSpeed: string, carCost: string) {
        super(carName, engineType);
        this.maxSpeed = maxSpeed;
        this.carCost = carCost;
    }
  
    public getCharacteristicsCar(): string {
        return `${super.getCharacteristicsCar()} and max speed equal to ${this.maxSpeed}. Approximetly cost of the car is ${this.carCost}`;
    }
  }
  
  class LuxuryCar extends Car {
    private maxSpeed: string;
    private carCost: string;
  
    constructor(carName: string, engineType: string, maxSpeed: string, carCost: string) {
        super(carName, engineType);
        this.maxSpeed = maxSpeed;
        this.carCost = carCost;
    }
  
    public getCharacteristicsCar(): string {
        return `${super.getCharacteristicsCar()} and max speed equal to ${this.maxSpeed}. Approximetly cost of the car is ${this.carCost}`;
    }
  }
  
  console.log("Task 1:");
  
  const sportCar = new SportCar("BMW", "T234", "350 km/h", "$1000000");
  console.log(sportCar.getCharacteristicsCar());
  
  const luxuryCar = new LuxuryCar("Rolls Royce", "T4", "200 km/h", "$1000001");
  console.log(luxuryCar.getCharacteristicsCar());
}




/*Task 2 üíª
–°–æ–∑–¥–∞–π—Ç–µ –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞ –ª—é–¥–µ–π. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É `My name is <name>`. 
–ò –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç–≤—É—é—â–µ–µ –∏–º—è
*/
{
  class Person {
    name: string;
  
    constructor(name: string) {
      this.name = name;
    }
    }
    
    function sayName(): void {
      console.log(`My name is ${this.name}.`);
  }
  
  const person1 = new Person("Tom");
  const person2 = new Person("Max");

  console.log("Task 2:");

  sayName.call(person1);
  sayName.call(person2);
}




/*Task 3 üíª
–°–æ–∑–¥–∞–π—Ç–µ –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞ –º–∞—à–∏–Ω. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–≤–æ–¥—è—â–∏–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π –º–∞—à–∏–Ω—ã, –∏ —Å –∫–∞–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—É–ª—å. 
–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç–≤—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–∞—Ö. 
–ö –ø—Ä–∏–º–µ—Ä—É `This car has 3 doors and this is left-hand drive car`
*/
{
  class Car {
    numberOfDoors: number;
    steeringSide: string;
  
    constructor(numberOfDoors: number, steeringSide: string) {
      this.numberOfDoors = numberOfDoors;
      this.steeringSide = steeringSide;
    }
    }
    
    function getCarInfo(): void {
      console.log(`This car has ${this.numberOfDoors} doors and this is ${this.steeringSide} drive car`);
  }
  
  const car1 = new Car(3,  "left-hand");
  const car2 = new Car(5,  "right-hand");

  console.log("Task 3:");

  getCarInfo.call(car1);
  getCarInfo.call(car2);
}




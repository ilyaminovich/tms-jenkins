'use strict';

//NORMAL level

/*Task 1 üñ•
–í—ã–≤–µ–¥–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –≤ –∫–æ–Ω—Å–æ–ª—å —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ **`forEach`**
```
    const fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]
```
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function` */

{   
    console.log("Task 1.1: ");
    

    const fibonacci: number[] = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987];

    function getFibonacci(element: number) {
    console.log(element);
    }
    fibonacci.forEach(getFibonacci);
}


{
    console.log("Task 1.2: ");
    

    const fibonacci: number[] = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987];

    fibonacci.forEach((element: number) => {
    console.log(element);
    });
}



/*Task 2 üñ•
–ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`map`** —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å—Å–∏–≤–∞ **`users`**, 
–≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:
> ['member 1: Darya', 'member 2: Masha', ... etc]
```
    const users = ['Darya', 'Masha', 'Denis', 'Vitaliy', 'Polina', 'Anton']
```
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`. */

{
    console.log("Task 2.1: ");


    const users: string[] = ['Darya', 'Masha', 'Denis', 'Vitaliy', 'Polina', 'Anton'];

    function getUsers(element: string, index: number) {
        return (`member ${index + 1}: ${element}`);
        }
    
    let users2: string[] = users.map(getUsers);
    console.log(users2);
}


{
    console.log("Task 2.2: ");


    const users: string[] = ['Darya', 'Masha', 'Denis', 'Vitaliy', 'Polina', 'Anton'];

    const users2: string[] = users.map((element, index) => `member ${index + 1}: ${element}`);

    console.log(users2);
}




/*Task 3 üñ•
–° –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ **`filter`** —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.
```
    const numbers = [7, -4, 32, -90, 54, 32, -21]
```
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`. */

{
    console.log("Task 3.1: ");

    const numbers: number[] = [7, -4, 32, -90, 54, 32, -21];

    function getPositiveNumbers(element: number) {
        return element >= 0;
    }
    
    let positiveNumbers: number[] = numbers.filter(getPositiveNumbers);
    console.log(positiveNumbers);
}


{
    console.log("Task 3.2: ");


    const numbers: number[] = [7, -4, 32, -90, 54, 32, -21];
    
    const result: number[] = numbers.filter(number => number >= 0);

    console.log(result);   
}




/*Task 4 üñ•
–ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`reduce`** –ø–æ–ª—É—á–∏—Ç–µ —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –º–∞—Å—Å–∏–≤–∞.
```
    const fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]
```
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`. */

{
    const fibonacci: number[] = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987];

    function sumFibonacciNumbers(numbers: number[]): number {
        return numbers.reduce(function (a, b) {
            return a + b;
        });
    }
    let total: number = sumFibonacciNumbers(fibonacci);
    console.log("Task 4.1: ", total);
}


{
    const fibonacci: number[] = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987];
    
    let total: number = fibonacci.reduce((a, b)  => a + b);
    console.log("Task 4.2: ", total);
}




/*Task 5 üñ•
–ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`find`** –Ω–∞–π–¥–∏—Ç–µ –≤ –º–∞—Å—Å–∏–≤–µ –ø–µ—Ä–≤–æ–µ —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ.
```
    const numbers = [5, 9, 13, 24, 54, 10, 13, 99, 1, 5]
``` */

{
    const numbers: number[] = [5, 9, 13, 24, 54, 10, 13, 99, 1, 5];

    function isEven(element: number) {
        return element % 2 === 0;
      }
    console.log("Task 5: ", numbers.find(isEven));
}




/*Task 6 üñ•
–ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`some`** –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ, –≤ –º–∞—Å—Å–∏–≤–µ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∫—Ä–∞—Ç–Ω—ã–π 3 –∏ 5.
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`. 
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –∫–æ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ true –∏–ª–∏ false */

{
    console.log("Task 6.1:");

    function isMultipleOf(element: number): boolean {
        return element % 3 === 0 && element % 5 === 0;
    }
    console.log([12, 5, 8, 1, 15].some(isMultipleOf));
    console.log([12, 5, 3, 1, 4].some(isMultipleOf));
}


{
    console.log("Task 6.2:");

    let array1: number[] = [2, 5, 8, 1, 15];
    let array2: number[] = [12, 5, 3, 1, 4];

    let multipleOfThreeAndFive = (numbers: number[]): boolean => {
        return numbers.some((element) => {
            return element % 3 === 0 && element % 5 === 0;
        });
    }
    console.log(multipleOfThreeAndFive(array1));
    console.log(multipleOfThreeAndFive(array2));
}




/*Task 7 üñ•
–ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`every`** –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ, –≤ –º–∞—Å—Å–∏–≤–µ —Å—É–º–º–∞ —Ü–∏—Ñ—Ä –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ç–Ω–∞—è.
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`. 
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –∫–æ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ true –∏–ª–∏ false */
{
    function checkEvenNumbers(numbers: number[]): boolean {
        function getSumOfDigitsSquaredNumber (number: number): number {
            let squaredNumber: number = number ** 2; // –ö–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞
            let sumOfDigits: number = 0;
    
            //–ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Ü–∏—Ñ—Ä –Ω–æ–≤–æ–≥–æ —á–∏—Å–ª–∞
            for (const digitStr of String(squaredNumber)) { 
                sumOfDigits += parseInt(digitStr, 10);
            }
                return sumOfDigits;
        }
        //–ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –µ–≥–æ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —á–µ—Ç–Ω—ã–º
        let numberArray: number[] = numbers.map(getSumOfDigitsSquaredNumber);
        return numberArray.every(sum => sum % 2 == 0);
    }
    let numbers: number[] = [2, 14, 123, 1234];
    console.log("Task 7.1: ", checkEvenNumbers(numbers));
}


{
    let evenNumbers = (numbers: number[]): boolean => {
        let sumOfDigitsSquaredNumber = (number: number): number => {
            let squaredNumber: number = number ** 2;
            let sumOfDigits: number = 0;
    
            for (const digitStr of String(squaredNumber)) {
                sumOfDigits += parseInt(digitStr, 10);
            }
            return sumOfDigits;
        };
    
        let numberArray: number[] = numbers.map(sumOfDigitsSquaredNumber);
        return numberArray.every(sum => sum % 2 == 0);
    };
    let numbers: number[] = [5, 15, 111, 1112];
    console.log("Task 7.2: ", evenNumbers(numbers));
}




/*Task 8 üñ•
–ò—Å–ø–æ–ª—å–∑—É—è –∫–æ–ª–ª–µ–∫—Ü–∏—é **`Map`** —Å–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∫ —Å–∞–ª–∞—Ç—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∞–ª–∞—Ç.
–ù–∞–ø—Ä–∏–º–µ—Ä: –û–≥—É—Ä—Ü—ã - 300, –ø–æ–º–∏–¥–æ—Ä—ã - 200, —Å–æ–ª—å - 10, —Å–º–µ—Ç–∞–Ω–∞ - 110
–í—ã–≤–µ–¥–∏—Ç–µ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ 100 –≥—Ä.
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`. */

{   
    console.log("Task 8.1:");

    let saladIngredients = new Map<string, number>([
        ["–û–≥—É—Ä—Ü—ã", 300],
        ["–ü–æ–º–∏–¥–æ—Ä—ã", 200],
        ["–°–æ–ª—å", 10],
        ["–°–º–µ—Ç–∞–Ω–∞", 110]
    ]);
    
    function getIngredientsOver100g(): void {
        for (let [ingredient, quantity] of saladIngredients) {
            if (quantity > 100) {
                console.log(ingredient);}
            }
        }
        getIngredientsOver100g();
}


{
    console.log("Task 8.2:");


    let saladIngredients = new Map<string, number>([
        ["–û–≥—É—Ä—Ü—ã", 300],
        ["–ü–æ–º–∏–¥–æ—Ä—ã", 200],
        ["–°–æ–ª—å", 10],
        ["–°–º–µ—Ç–∞–Ω–∞", 110]
    ]);

    saladIngredients.forEach((quantity, ingredient) => {
        if (quantity > 100) {
            console.log(ingredient);
        }
    });
}




/*Task 9 üñ•
–ò—Å–ø–æ–ª—å–∑—É—è –∫–æ–ª–ª–µ–∫—Ü–∏—é **`Set`** —Å–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Ö—Å—è –∑–Ω–∞—á–µ–Ω–∏–π:
```
    const numbers = [1, 6, 3, 2, 7, 325, 234, 54, 586, 23, 24, 64, 56, 3, 5, 7, 8, 1, 6, 8, 9, 4, 5, 61, 2, 4, 5, 6, 3, 5]
```
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`. */

{
    const numbers: number[] = [1, 6, 3, 2, 7, 325, 234, 54, 586, 23, 24, 64, 56, 3, 5, 7, 8, 1, 6, 8, 9, 4, 5, 61, 2, 4, 5, 6, 3, 5];
    
    function getUniqueNumbers(numbers: number[]): number[] {
        return [...new Set(numbers)];
    }
    console.log("Task 9.1: ", getUniqueNumbers(numbers));
    
}


{
    const numbers: number[] = [1, 6, 3, 2, 7, 325, 234, 54, 586, 23, 24, 64, 56, 3, 5, 7, 8, 1, 6, 8, 9, 4, 5, 61, 2, 4, 5, 6, 3, 5];

    const uniqueNumbersArrow = (numbers: number[]): number[] => {
         return [...new Set(numbers)];
    };
    console.log("Task 9.2: ", uniqueNumbersArrow(numbers));
}




/*Task 10 üñ•
–î–∞–Ω –º–∞—Å—Å–∏–≤. –ó–∞–ø–∏—à–∏—Ç–µ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é elem2, —Ç—Ä–µ—Ç–∏–π - –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é elem3. 
–ï—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –Ω–µ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ - –∑–∞–ø–∏—à–∏—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é elem3 –∑–Ω–∞—á–µ–Ω–∏–µ 'eee', 
–∞ –µ—Å–ª–∏ –Ω–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ - –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é elem2 –∑–∞–ø–∏—à–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ 'bbb'. –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∏–∫—É–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ.
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`. */

{
    console.log("Task 10.1:");


    const fruits: string[] = ["—è–±–ª–æ–∫–æ", "–≥—Ä—É—à–∞", "—Å–ª–∏–≤–∞"];

    function getFruits(array: any[]): [string, string] {
    let [_, elem2 = 'bbb', elem3 = 'eee'] = array;
        return [elem2, elem3];
    }
    const [elem2, elem3] = getFruits(fruits);

    console.log(elem2);
    console.log(elem3);
}


{
    console.log("Task 10.2:");


    const fruits: string[] = ["—è–±–ª–æ–∫–æ"];

    const resultFruits = (array: any[]): [string, string] => {
    let [_, elem2 = 'bbb', elem3 = 'eee'] = array;
        return [elem2, elem3];
    }
    const [elem2, elem3] = resultFruits(fruits);

    console.log(elem2);
    console.log(elem3);
}




/*Task 11 üñ•
–î–∞–Ω –æ–±—ä–µ–∫—Ç {name: '–ü–µ—Ç—Ä', 'surname': '–ü–µ—Ç—Ä–æ–≤', 'age': '20 –ª–µ—Ç', }. 
–ó–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ name, surname –∏ age. 
–°–¥–µ–ª–∞–π—Ç–µ —Ç–∞–∫, —á—Ç–æ–±—ã, –µ—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ - –æ–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 
{name: '–ê–Ω–æ–Ω–æ–º', 'surname': '–ê–Ω–æ–Ω–∏–º–æ–≤–∏—á', 'age': '? –ª–µ—Ç'}.
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`. */

{
    console.log("Task 11.1:");


    const persenInfo = {name: '–ü–µ—Ç—Ä', 'surname': '–ü–µ—Ç—Ä–æ–≤', 'age': '20 –ª–µ—Ç', };

    function getPersenInfoWithDefaults(person: { 
        name?: string, 
        surname?: string, 
        age?: string
     }) {
        const {name = '–ê–Ω–æ–Ω–æ–º', surname = '–ê–Ω–æ–Ω–∏–º–æ–≤–∏—á', age = '? –ª–µ—Ç'} = persenInfo;
            return {name, surname, age};
        }
        const result = getPersenInfoWithDefaults(persenInfo);

        console.log(result.name);
        console.log(result.surname);
        console.log(result.age);      
}


{
    console.log("Task 11.2:");


    const personInfo = {};

    const persenInfoWithDefaults = (person: { name?: string, 
        surname?: string, 
        age?: string 
    }) => {
        const { name = '–ê–Ω–æ–Ω–æ–º', surname = '–ê–Ω–æ–Ω–∏–º–æ–≤–∏—á', age = '? –ª–µ—Ç' } = person;
        return { name, surname, age };
    };
    
    const result = persenInfoWithDefaults(personInfo);

    console.log(result.name);
    console.log(result.surname);
    console.log(result.age);
}







console.log("ADVANCED level");

/*Task 1 üë®‚Äçüè´ –¢—Ä–æ–ª–ª–∏ –∞—Ç–∞–∫—É—é—Ç –Ω–∞—à —Ä–∞–∑–¥–µ–ª —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏!!!
+ –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≥–ª–∞—Å–Ω—ã–µ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ç—Ä–æ–ª–ª–µ–π, –Ω–µ–π—Ç—Ä–∞–ª–∏–∑—É—è —É–≥—Ä–æ–∑—É.
+ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –≥–ª–∞—Å–Ω—ã–º–∏.
+ –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∫–∞ ¬´This website is for losers LOL!¬ª —Å—Ç–∞–Ω–µ—Ç "Ths wbst s fr lsrs LL!".
> –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ **`y`** –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≥–ª–∞—Å–Ω–æ–π. */

{
    let string = "This website is for losers LOL!";

    function removeVowels(string: string): string {
        let vowelsRegex = /[aeiouAEIOU]/g;
        return string.replace(vowelsRegex, '');
    }
    
    let result = removeVowels(string);
    console.log("Task 1: ", result);
}




/*Task 2 üë®‚Äçüè´ –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏, –Ω–µ—Ç —Ç–µ–æ—Ä–∏–∏
+ –í –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –ø—Ä–∏–º–µ—Ä–∞—Ö –ø–æ–∫–∞–∑–∞–Ω–æ, –∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é:
```
    accum("abcd") -> "A-Bb-Ccc-Dddd"
    accum("RqaEzty") -> "R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy"
    accum("cwAt") -> "C-Ww-Aaa-Tttt"
```
> –ü–∞—Ä–∞–º–µ—Ç—Ä - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª—é—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –æ—Ç a..z –∏ A..Z. */

{
    console.log("Task 2:");


    let code: string[] = ['abcd', 'RqaEzty', 'cwAt'];

    let accum = (code: string): string => {
        return code.split('').map((element, index) => {
            return element.toUpperCase() + element.toLowerCase().repeat(index);
        }).join('-');
    };
    
    code.forEach((element) => {
        console.log(accum(element));
    });
}




/*Task 3 üë®‚Äçüè´ –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏, –Ω–µ—Ç —Ç–µ–æ—Ä–∏–∏
+ –í –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –ø—Ä–∏–º–µ—Ä–∞—Ö –ø–æ–∫–∞–∑–∞–Ω–æ, –∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é:
```javascript
    accum("abcd") -> "A-Bb-Ccc-Dddd"
    accum("RqaEzty") -> "R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy"
    accum("cwAt") -> "C-Ww-Aaa-Tttt"
``` */

{
//=Task 2
}




/*Task 4 üë®‚Äçüè´ –°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –∏ —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π
+ –í —ç—Ç–æ–º –Ω–µ–±–æ–ª—å—à–æ–º –∑–∞–¥–∞–Ω–∏–∏ –≤–∞–º –¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–µ–ª, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏, 
–∏ –≤—ã –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∏ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ.
```
    highAndLow("1 2 3 4 5"); // return "5 1"
    highAndLow("1 2 -3 4 5"); // return "5 -3"
    highAndLow("1 9 3 4 -5"); // return "9 -5"
```
> –°—Ç—Ä–æ–∫–∞ –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º, 
–ø—Ä–∏ —ç—Ç–æ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º. */

{
    console.log("Task 4:");


    function highAndLow(str: string): string {
    
        let numbers: number[] = str.split(' ').map(Number);
    
        let maxNumber: number = Math.max(...numbers);
        let minNumber: number = Math.min(...numbers);
    
            return `${maxNumber} ${minNumber}`;
    }
    console.log(highAndLow("1 2 3 4 5"));
    console.log(highAndLow("1 2 -3 4 5"));
    console.log(highAndLow("1 9 3 4 -5"));
}




/*Task 5 üë®‚Äçüè´ –ò–∑–æ–≥—Ä–∞–º–º—ã
+ –ò–∑–æ–≥—Ä–∞–º–º–∞ - —ç—Ç–æ —Å–ª–æ–≤–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –±—É–∫–≤, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–ª–∏ –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö. 
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –∏–∑–æ–≥—Ä–∞–º–º–æ–π. 
–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–≥—Ä–∞–º–º–æ–π. –†–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ –º—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
``` isIsogram("Dermatoglyphics") == true
    isIsogram("aba") == false
    isIsogram("moOse") == false // -- ignore letter case
``` */

{
    console.log("Task 5:");


    function isIsogram(str: string): boolean {
  
        let lowerCaseStr: string = str.toLowerCase();
        let uniqueChars: Set<string> = new Set();
    
        for (const char of lowerCaseStr) {
            if (uniqueChars.has(char)) {
                return false;
            }
            uniqueChars.add(char);
        }
        return true;
    }
    console.log(isIsogram("Dermatoglyphics"));
    console.log(isIsogram("aba"));
    console.log(isIsogram("moOse"));
}